#!/usr/bin/env zsh
programname=$0:t
help() {
    cat >&1 <<END
WebMaster â€” wishmaster for WebM encoding: magic button with additional controls
Usage: $programname [file1 options] file1 [[file2 options] file2] ...
Options:
    .		- use last specified file
    -8		- use VP8 video codec
    -9		- use VP9 video codec (default)
    -s time	- start of needle fragment in source video
        .: detect black frames and cut them (default)
    -t length	- duration of fragment
    -T time	- end of fragment (from beginning of file)
	must be specified after -s
    -a value	- audio option:
	0-9: libvorbis quality
	>=10: opus bitrate, kbit/s (default: 64)
	.: copy audio
	n: disable audio
    -f		- owerwrite files
	(othervise conversion with existing results will be skipped)
    -w width	- scale destination video to given width
	. - don't scale (default)
    -b		- use "best" VP8/VP9 quality setting
    -C value	- cpu-used (speed) VP8/VP9 setting:
        0..4 for VP8, 0..8 for VP9
        0 - better quality, max - faster speed, default: 1
    -c crf	- constant rate factor (default: 16)
    -m qp	- miniumal quantizer scale, qmin (default: 8)
    -M qp	- qmax (default: 60)
    -B bitrate  - specify video bitrate, kbit/s
	.: calculate bitrate from file size (default)
    -n filename - output filename (.webm will be added)
    -F size     - result size, kilobytes (default: 6144)
    -S filename - render subtitles (. to use subs from container)
    -A value	- audio filters
    -V value	- video filters
    -k          - keep temporary files (directory \$output_filename.webm.tmp)
    -v          - verbose output
Options of prior files will be used as defaults for next.
Exceptions: filename (-n), time options (-s -t -T).
END
    exit 1
}
log() {
    local prompt="${bg[blue]} i ${reset_color}"
    [[ $1 == '-p' ]] && prompt=$2 && shift 2
    local fmt=$1
    shift
    printf "$prompt $fmt\n" $@
}
time_to_seconds() {
    [[ $1 =~ ^((([0-9]+):)?([0-9]+):)?([0-9.]+)$ ]]
    local result=$((match[3]*3600 + match[4]*60 + match[5]))
    [[ -n $2 ]] && (($2=result)) || echo $result
}
perform() {
    ((verbose)) && echo "${fg[red]}> ${reset_color}" "$@"
    $@
}
# defaults
width=.
fsize=6144
audio=64
force=0
vp9=1
typeset -A vencopts  # options for 2nd video pass
vencopts=(
    -crf 16
    -qmin 8
    -qmax 60
)
[[ -n $FFMPEG ]] || FFMPEG=(ffmpeg -hide_banner -v warning -stats)

# config file
for f in $0.rc ~/.${programname}rc; [[ -f $f ]] && source  $f
unset f

[[ -z $1 ]] && help
set -e
autoload colors; colors

while [[ ! -z $1 ]]
do
    unset output_file
    start=.
    unset length
    OPTIND=1
    while getopts "89a:fbC:c:m:M:B:w:s:t:T:n:S:hF:A:V:kv" o
    do
        case $o in
	    8)  vp9=0;;
	    9)  vp9=1;;
	    a)  audio=$OPTARG;;
            f)  force=1;;
            w)  width=$OPTARG;;
            s)  [[ $OPTARG == . ]] && start=$OPTARG || time_to_seconds $OPTARG start;;
            t)  time_to_seconds $OPTARG length;;
	    T)  length=$(($(time_to_seconds $OPTARG) - start));;
            b)  vencopts[-quality]="best";;
	    C)  vencopts[-speed]=$OPTARG;;
	    c)	vencopts[-crf]=$OPTARG;;
	    m)  vencopts[-qmin]=$OPTARG;;
	    M)  vencopts[-qmax]=$OPTARG;;
	    B)	force_bitrate=$OPTARG;;
	    n)  output_file="${OPTARG%.webm}.webm";;
	    S)  subs=$OPTARG;;
	    F)  fsize=$OPTARG;;
	    A)	custom_afilters=$OPTARG;;
	    V)	custom_vfilters=$OPTARG;;
            k)  keeptmp=1;;
            v)  verbose=1;;
	    h|?)  help;;
	esac
    done
    shift $((OPTIND - 1))
    [[ $1 == . ]] || input_file=$1
    [[ -z $input_file ]] && help
    shift

    # set output filename
    [[ -z $output_file ]] && output_file="${f:t:r}.webm"  # strip path and extension
    [[ $output_file == $input_file ]] && output_file=${input_file/webm/converted.webm}
    # without -f skip existing files
    ! ((force)) && [[ -f $output_file ]] && continue

    # temporary dir and files
    tmpdir="$output_file.tmp"
    af="$tmpdir/audio.webm"; af_part="$tmpdir/audio.part.webm"
    vf="$tmpdir/video.webm"; vf_part="$tmpdir/video.part.webm"
    mkdir -p $tmpdir

    # video output options
    vopts=(-pix_fmt ${PIX_FMT-+yuv420p})
    ((vp9)) \
	&& vopts+=(-c:v libvpx-vp9) \
	|| vopts+=(-c:v libvpx -auto-alt-ref 1 -lag-in-frames 16)

    # audio output options
    if [[ $audio == "." ]]
	then aopts=(-c:a copy)
    elif (($audio >= 10))
	then aopts=(-c:a libopus -b:a "${audio}k")
    elif [[ $audio == "n" ]]
	then aopts=(-an)
    else
	aopts=(-q:a $audio)
    fi

    # input options
    iopts=()
    [[ $start == . ]] && start=$(
        ffmpeg -i $f -vframes 200 -vf blackdetect=d=0.01 -f null -y /dev/null 2>&1 \
        | awk -F'[: ]' '/black_start:0 /{print $9}')
    [[ -n $start ]] && iopts+=(-ss $start) || unset start

    # filters
    vfilters=( )
    afilters=( )
    [[ $width != . ]] && vfilters+=("scale=${width}:trunc(${width}/dar/2)*2")
    if [[ -n $subs ]]
    then
	[[ $subs == . ]] && subs_file=$input_file || subs_file=$subs
	[[ $subs_file =~ ass$ ]] \
            && subs_filter="ass='${subs_file//'\'/'\\'}'" \
            || subs_filter="subtitles='${subs_file//'\'/'\\'}'"
        # hack: temporary shift frame timings to render subtitles
        (($start)) \
            && vfilters+=( setpts=PTS+$start/TB $subs_filter setpts=PTS-STARTPTS ) \
            || vfilters+=( $subs_filter )
    fi
    vfilters+=( $custom_vfilters )
    afilters+=( $custom_afilters )
    ((${#afilters})) && aopts+=(-af ${(j:,:)afilters})
    ((${#vfilters})) && vopts+=(-vf ${(j:,:)vfilters})

    # general output options
    opts=()
    time_to_seconds "$(ffprobe $input_file 2>&1|sed -n 's/.*Duration: \([^,]\+\),.*/\1/p')" source_length
    [[ -z $length ]] && ((length = source_length - start))
    opts+=(-t $length)
    log -p "${fg[green]}==>$reset_color" 'Compressing %s (%d seconds, overall bitrate: %dK)' \
        $output_file $length $((fsize * 8 / length))

    # first step: audio
    counters[1]=$SECONDS
    if [[ $audio == "n" ]]
    then
        unset af
    else
        if ((force)) || ! [[ -f $af ]]
        then
            log '%s: encoding audio (%s)' $output_file "$aopts"
	    perform $FFMPEG $iopts -i $input_file \
		-vn -map 0:a:0 $opts $aopts -strict -2 -y $af_part
            mv $af_part $af
        fi
	((audio_size = $(stat -c%s $af) / 1024))
    fi
    log '%s: audio size: %d KiB, bitrate for video: %dK' \
        $output_file $audio_size $((vbitrate = (fsize - audio_size) * 8 / length))
    ((force_bitrate)) && vbitrate=$force_bitrate

    # second step: first pass of video
    counters[2]=$SECONDS
    if ((force)) || ! [[ -f "$tmpdir/2pass-0.log" ]]
    then
        log "$output_file: examining video"
	perform $FFMPEG -loglevel error $iopts -i $input_file \
	    -an -map 0:v:0 $opts $vopts -pass 1 -passlogfile "$tmpdir/2pass.part" -f null -
        mv $tmpdir/2pass{.part,}-0.log
    fi

    # third step: second pass of video
    counters[3]=$SECONDS
    if ((force)) || ! [[ -f $vf ]]
    then
        log "%s: encoding video (-b:v %dK %s)" $output_file $vbitrate "${(kv)vencopts}"
	perform $FFMPEG $iopts -i $input_file \
	    -map 0:v:0 $opts $vopts \
	    -b:v ${vbitrate}K ${(kv)vencopts} \
	    -pass 2 -passlogfile "$tmpdir/2pass" -y $vf_part
        mv $vf_part $vf
    fi

    # muxing result
    if ((MUX_WITH_FFMPEG))
    then
        perform $FFMPEG -i $vf ${af+-i} $af -c copy -y $output_file
    else
        perform mkvmerge -q $vf $af -o $output_file || [[ $? == 1 ]] || break
    fi

    # checking output file size
    ofsize="$(stat -c %s $output_file)"
    log '%s encoded: size %d KiB, time: total %d | audio %d | pass1 %d | pass2 %d seconds.' \
        $output_file $((ofsize/1024)) $((SECONDS - counters[1])) $((counters[2] - counters[1])) \
        $((counters[3] - counters[2])) $((SECONDS - counters[3]))
    ((ofsize > fsize * 1024)) \
        && {
            log '%s is too big, bitrate overshoot: %dK' $output_file \
                $((bitrate_overshoot = (ofsize / 1024 - fsize) * 8 / length))
            # lowering opus bitrate with fit-audio-to-limit
            ((audio >= 10)) && ((audio - bitrate_overshoot > 4)) \
                && perform ${0:A:h}/fit-audio-to-limit -F $fsize \
                    ${start:+-s} $start $input_file $output_file
        } || ((keeptmp)) || rm -r $tmpdir
    echo "${fg[red]}-----${reset_color}"
done
